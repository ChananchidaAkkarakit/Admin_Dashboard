// ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
export const MAX_MM = 200;

export function clamp01to100(n: number) {
  return Math.max(0, Math.min(100, Math.round(n)));
}

// üëá ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢: ‡πÅ‡∏õ‡∏•‡∏á "‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ" ‚Üí ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå 0‚Äì100
function anyToPercent(value: number, maxMm: number) {
  if (!Number.isFinite(value)) return 0;
  if (value >= 0 && value <= 1) return clamp01to100(value * 100); // ratio
  if (value > 0 && value <= 100) return clamp01to100(value);      // already %
  // > 100 ‚Üí ‡∏°‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô mm
  return clamp01to100((value / maxMm) * 100);
}

/** ‡πÅ‡∏õ‡∏•‡∏á mm ‚Üí percent (0‚Äì100) */
export function mmToPercent(mm?: number | null, max = 200): number | null {
  if (mm == null || !Number.isFinite(mm)) return null;
  // ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏™‡πÄ‡∏Å‡∏•
  return clamp01to100(100 - (mm / max) * 100);
}

/** ‡∏Ñ‡∏∑‡∏ô percent ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å DB ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
 *  - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 0‚Äì1, 0‚Äì100, ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢ mm (>100)
 */
export function getCapacityPercent(input: {
  capacity_percent?: number | null; // ‡∏à‡∏≤‡∏Å view v_slots ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô 0‚Äì1 ‡∏´‡∏£‡∏∑‡∏≠ 0‚Äì100)
  capacity_mm?: number | null;      // ‡∏à‡∏≤‡∏Å view v_slots ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (mm)
  capacity?: number | null;         // legacy 0‚Äì250 (mm)
  maxMm?: number;                   // optional: ‡πÄ‡∏û‡∏î‡∏≤‡∏ô mm ‡∏£‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á
}): number {
  const maxMm = Number.isFinite(input.maxMm as number) ? (input.maxMm as number) : MAX_MM;

  // 1) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤ percent ‡∏à‡∏≤‡∏Å DB ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏ï‡πà normalize ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡πÄ‡∏Å‡∏•
  const fromView = input.capacity_percent;
  if (Number.isFinite(fromView as number)) {
    return anyToPercent(Number(fromView), maxMm);
  }

  // 2) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ percent ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô mm/legacy
  const mm =
    (typeof input.capacity_mm === "number" ? input.capacity_mm : null) ??
    (typeof input.capacity === "number" ? input.capacity : null);

  if (mm != null && Number.isFinite(mm)) {
    return anyToPercent(Number(mm), maxMm);
  }

  return 0;
}

/** ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "xx / 100" */
export function formatCapacityText(percent: number | null | undefined) {
  const p = Number.isFinite(percent as number) ? Math.round(percent as number) : 0;
  return `${p}%`;
}
